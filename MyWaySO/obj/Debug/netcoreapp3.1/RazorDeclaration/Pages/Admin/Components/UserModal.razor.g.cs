#pragma checksum "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\Pages\Admin\Components\UserModal.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a9a989b127aea6b4aab33ef4bfbd66b84a439e81"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MyWaySO.Pages.Admin.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using MyWaySO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using MyWaySO.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\Pages\Admin\Components\UserModal.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\Pages\Admin\Components\UserModal.razor"
using MyWaySO.Areas.Identity.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\Pages\Admin\Components\UserModal.razor"
using MyWaySO.Areas.Identity.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\Pages\Admin\Components\UserModal.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\Pages\Admin\Components\UserModal.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\Pages\Admin\Components\UserModal.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
    public partial class UserModal : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 74 "C:\Users\ruisa\source\repos\MyWaySO\MyWaySO\Pages\Admin\Components\UserModal.razor"
       
    [Parameter]
    public ApplicationUser ModelUser { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    IList<Uh> AllModalUhs = new List<Uh>();
    IList<ApplicationRole> AllRoles = new List<ApplicationRole>();

    IList<UserUh> ownedUhList = new List<UserUh>();
    public Guid[] OwnedUhs { get; set; } = new Guid[] { };

    ApplicationUserRole ownedRole = new ApplicationUserRole();
    public string OwnedRoleId { get; set; } = string.Empty;
    // To hold any possible errors
    string strError = "";

    protected override void OnInitialized()
    {
        AllModalUhs = _uhService.GetAllUhs();
        AllRoles = _appRoleService.GetAllRoles();
    }

    protected override void OnParametersSet()
    {
        FillOwnedList(ModelUser.Id);
    }

    private void FillOwnedList(string uid)
    {
        ownedUhList = _userUhService.GetOwnedUserUhs(uid);
        OwnedUhs = ownedUhList.Select(i => i.Uh.UhID).ToArray();

        ownedRole = _appUserRoleService.GetUserRole(uid);
        if (ownedRole != null)
        {
            OwnedRoleId = ownedRole.RoleId;
        }
        else
        {
            OwnedRoleId = string.Empty;
        }

    }

    private async void HandleValidSubmit()
    {
        try
        {
            if (IsEdit)
            {
                // Get the user
                var user = await _UserManager.FindByIdAsync(ModelUser.Id);

                // Update the user
                user.Name = ModelUser.Name;
                user.UserName = ModelUser.UserName;
                user.NormalizedUserName = ModelUser.UserName.ToUpper();
                user.Email = ModelUser.UserName;
                user.NormalizedEmail = ModelUser.UserName.ToUpper();
                user.PasswordHash = user.PasswordHash;

                // Only update password if the current value
                // is not the default value
                if (ModelUser.PasswordHash != "*****")
                {
                    var resetToken = await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser = await _UserManager
                        .ResetPasswordAsync(
                            user,
                            resetToken,
                            ModelUser.PasswordHash
                        );

                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError = passworduser.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        // Keep the popup opened
                        return;
                    }
                }

                var updateResult = await _UserManager.UpdateAsync(user);

                if (!updateResult.Succeeded)
                {
                    if (updateResult.Errors.FirstOrDefault() != null)
                    {
                        strError = updateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Update error";
                    }
                    // Keep the popup opened
                    return;
                }
                else
                {
                    await _userUhService.DeleteAllUserUh(ModelUser.Id);
                    _appUserRoleService.DeleteAllUserRoles(ModelUser.Id);

                    if (OwnedUhs != null)
                    {
                        foreach (var ownedUh in OwnedUhs)
                        {
                            UserUh itemUserUh = new UserUh()
                            {
                                UhID = ownedUh,
                                UserId = user.Id
                            };
                            _userUhService.AddUserUh(itemUserUh);
                        }
                    }

                    if (OwnedRoleId != null)
                    {
                        ApplicationUserRole itemUserRole = new ApplicationUserRole()
                        {
                            RoleId = OwnedRoleId,
                            UserId = user.Id
                        };
                        _appUserRoleService.AddUserRole(itemUserRole);
                    }
                }

                ShowMsg(1);

            }
            else
            {
                // Insert new user
                var NewUser = new ApplicationUser
                {
                    Name = ModelUser.Name,
                    UserName = ModelUser.UserName,
                    NormalizedUserName = ModelUser.UserName.ToUpper(),
                    Email = ModelUser.UserName,
                    NormalizedEmail = ModelUser.UserName.ToUpper()
                };
                var CreateResult = await _UserManager.CreateAsync(NewUser, ModelUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult.Errors.FirstOrDefault() != null)
                    {
                        strError = CreateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    // Keep the popup opened
                    return;
                }
                else
                {
                    if (OwnedUhs != null)
                    {
                        foreach (var ownedUh in OwnedUhs)
                        {
                            UserUh itemUserUh = new UserUh()
                            {
                                UhID = ownedUh,
                                UserId = NewUser.Id
                            };
                            _userUhService.AddUserUh(itemUserUh);
                        }
                    }

                    if (OwnedRoleId != null)
                    {
                        ApplicationUserRole itemUserRole = new ApplicationUserRole()
                        {
                            RoleId = OwnedRoleId,
                            UserId = NewUser.Id
                        };
                        _appUserRoleService.AddUserRole(itemUserRole);
                    }
                }

                ShowMsg(0);
            }

            await CloseUserModal("userModal");
            DataChanged?.Invoke();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    private async void ShowMsg(int msg)
    {
        this.ToastTitle = this.Toasts[msg].Title;
        this.ToastContent = this.Toasts[msg].Content;
        this.ToastCssClass = this.Toasts[msg].CssClass;
        this.ToastIcon = this.Toasts[msg].Icon;

        await Task.Delay(100);
        await this.ToastObj.Show();
    }

    private async Task CloseUserModal(string modalId)
    {
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);
    }

    private Dictionary<string, object> uhMBtnConfig(string type, string title, string ddismiss)
    {
        var btn = new Dictionary<string, object>()
{
            {"type", type},
            { "title", title},
            { "data-dismiss", ddismiss}
        };

        return btn;
    }

    SfToast ToastObj;

    private string ToastTitle = "";
    private string ToastContent = "";
    private string ToastCssClass = "";
    private string ToastIcon = "";

    private class ToastOption
    {
        public string Title { get; set; }
        public string Content { get; set; }
        public string CssClass { get; set; }
        public string Icon { get; set; }
    }

    private ToastOption[] Toasts = new ToastOption[]
    {
        new ToastOption{ Title = "Sucesso!", Content="Utilizador criado com sucesso.", CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastOption{ Title = "Sucesso!", Content="Utilizador editado com sucesso.", CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastOption{ Title = "Sucesso!", Content="Utilizador apagado com sucesso.", CssClass="e-toast-info", Icon="e-info toast-icons" }
        };


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime _jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUhService _uhService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserUhService _userUhService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAppUserRoleService _appUserRoleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAppRoleService _appRoleService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAppUserService _appUserService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> _UserManager { get; set; }
    }
}
#pragma warning restore 1591
