@page "/edituser/{id:guid}"

@using MyWaySO.Data
@using MyWaySO.Areas.Identity.Models
@using MyWaySO.Areas.Identity.Services

@using System
@using System.Linq
@using System.Threading.Tasks
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.Rendering
@using Syncfusion.Blazor.DropDowns

@inject ApplicationDbContext db
@inject IAppUserService applicationUserService
@inject IUhService _uhService

@if (applicationUser != null)
{
    <div>
        <p>ID: @applicationUser.Id</p>
        <p>NAME: @applicationUser.Name</p>
        <p>USERNAME: @applicationUser.UserName</p>

        @*<p>@applicationUser.AccessFailedCount</p>
            <p>@applicationUser.ApplicationUserRoles</p>
            <p>@applicationUser.ConcurrencyStamp</p>
            <p>@applicationUser.Email</p>
            <p>@applicationUser.EmailConfirmed</p>
            <p>@applicationUser.LockoutEnabled</p>
            <p>@applicationUser.LockoutEnd</p>
            <p>@applicationUser.NormalizedEmail</p>
            <p>@applicationUser.NormalizedUserName</p>
            <p>@applicationUser.PasswordHash</p>
            <p>@applicationUser.UserUhs.Uh.Name</p>*@
        <div id="local-data" class="col-lg-6">
            <div class="content">
                <h4>Local Data</h4>
                @if (AllUhs != null)
                {
                    <SfMultiSelect TValue="string[]" Placeholder="UHS" DataSource="@AllUhs">
                        <MultiSelectFieldSettings Text="UhNome" Value="UhID"></MultiSelectFieldSettings>
                    </SfMultiSelect>
                    <p></p>
                    <p>
                        @foreach (var item in AllUhs)
                        {
                            @item.UhID.ToString()
                        }
                    </p>
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm12">
            <div class="card card-info">
                <div class="card-header">
                    <h3 class="card-title">@applicationUser.Id</h3>
                </div>
                <!-- /.card-header -->
                <!-- form start -->
                <form class="form-horizontal" method="post">
                    <div class="card-body">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="ApplicationUser.Id" />
                        <div class="form-group row">
                            <label asp-for="ApplicationUser.Name" class="col-sm-4 control-label"></label>
                            <div class="col-sm-8">
                                <input asp-for="ApplicationUser.Name" class="form-control" />
                                <span asp-validation-for="ApplicationUser.Name" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label asp-for="ApplicationUser.UserName" class="col-sm-4 control-label"></label>
                            <div class="col-sm-8">
                                <input asp-for="ApplicationUser.UserName" class="form-control" />
                                <span asp-validation-for="ApplicationUser.UserName" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label asp-for="SelectedRole" class="col-sm-4 control-label"></label>
                            <div class="col-sm-8">
                                <select asp-for="SelectedRole" class="form-control" asp-items="ViewBag.RoleNames"></select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 control-label">Unidades de handling</label>
                            <div class="col-sm-8">
                                <table>
                                    <tr>
                                        @{
                                            @*int cnt = 0;

                                            foreach (var uh in AssignedUhDataList)
                                            {
                                                if (cnt++ % 5 == 0)
                                                {
                                                    @:</tr><tr>
                                                    }
                                                    @:<td>
                                                        <div class="icheck-success d-inline">
                                                            @{ var checkboxId = ("checkbox" + uh.Name);}
                                                            <input type="checkbox" id="@checkboxId"
                                                                   name="selectedUhs"
                                                                   value="@uh.UhID"
                                                                   @(Html.Raw(uh.Assigned ? "checked=\" checked\"" : "" )) />
                                                            <label for="@checkboxId">
                                                                @uh.Name&nbsp;&nbsp;
                                                            </label>
                                                        </div>
                                                    @:</td>
                                                }*@
                                        }
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <input type="submit" value="Gravar" class="btn btn-primary" />
                        &nbsp;|&nbsp;<a asp-page="Index" class="btn btn-default">Voltar</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    public ApplicationUserRole ApplicationUserRole { get; set; }
    [BindProperty]
    public ApplicationUser applicationUser { get; set; }
    public Guid SelectedRole { get; set; }

    public IList<Uh> AllUhs = new List<Uh>();

    //protected override async Task OnInitializedAsync()
    protected override void OnInitialized()
    {
        AllUhs = _uhService.GetAllUhs();

        if (Id != null)
        {
            applicationUser = applicationUserService.GetUser(Id.ToString());

            //ApplicationUser = db.ApplicationUsers
            //.Include(r => r.ApplicationUserRoles).ThenInclude(r => r.Role)
            //.Include(u => u.UserUhs).ThenInclude(u => u.Uh)
            //.AsNoTracking()
            //.FirstOrDefault(i => i.Id == Id.ToString());

            string roleId = db.ApplicationUserRoles.Where(i => i.UserId == Id.ToString()).Select(r => r.RoleId).FirstOrDefault();

            if (roleId != null)
            {
                SelectedRole = new Guid(roleId);
            }

            //ViewData["RoleNames"] = new SelectList(db.ApplicationRoles.OrderBy(n => n.Name), "Id", "Name", SelectedRole);

            //if (ApplicationUser == null)
            //{
            //    //return NotFound();
            //}

            //PopulateAssignedUhData(db, ApplicationUser);
        }
    }

    public List<AssignedUhData> AssignedUhDataList { get; set; }

    public void PopulateAssignedUhData(ApplicationDbContext db, ApplicationUser appUser)
    {
        if (appUser == null) { throw new NullReferenceException(); }
        if (db == null) { throw new NullReferenceException(); }

        DbSet<Uh> todasUh = db.Uhs;
        HashSet<Guid> userUhs = new HashSet<Guid>(appUser.UserUhs.Select(u => u.UhID));
        AssignedUhDataList = new List<AssignedUhData>();

        foreach (Uh uh in todasUh)
        {
            AssignedUhDataList.Add(new AssignedUhData
            {
                UhID = uh.UhID,
                Name = uh.UhNome,
                Assigned = userUhs.Contains(uh.UhID)
            });
        }
    }

    public void PopulateAllUhData(ApplicationDbContext db)
    {
        if (db == null) { throw new NullReferenceException(); }

        DbSet<Uh> todasUh = db.Uhs;
        AssignedUhDataList = new List<AssignedUhData>();

        foreach (Uh uh in todasUh)
        {
            AssignedUhDataList.Add(new AssignedUhData
            {
                UhID = uh.UhID,
                Name = uh.UhNome,
                Assigned = false
            });
        }
    }

    public static void UpdateUserUhs(ApplicationDbContext db, string[] selectedUhs, ApplicationUser userToUpdate)
    {
        if (userToUpdate == null) { throw new NullReferenceException(); }
        if (db == null) { throw new NullReferenceException(); }
        if (selectedUhs == null)
        {
            userToUpdate.UserUhs = new List<UserUh>();
            return;
        }

        HashSet<string> selectedUhsHS = new HashSet<string>(selectedUhs);
        HashSet<Guid> userUhs = new HashSet<Guid>(userToUpdate.UserUhs.Select(u => u.UhID));
        foreach (Uh uh in db.Uhs)
        {
            if (selectedUhsHS.Contains(uh.UhID.ToString()))
            {
                if (!userUhs.Contains(uh.UhID))
                {
                    userToUpdate.UserUhs.Add(
                        new UserUh
                        {
                            User = userToUpdate,
                            UhID = uh.UhID
                        });
                }
            }
            else
            {
                if (userUhs.Contains(uh.UhID))
                {
                    UserUh uhToRemove = userToUpdate.UserUhs.SingleOrDefault(i => i.UhID == uh.UhID);
                    _ = db.Remove(uhToRemove);
                }
            }
        }
    }
}
