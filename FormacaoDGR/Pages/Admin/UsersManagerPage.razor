@page "/usersmanager"
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity
@using FormacaoDGR.Areas.Identity.Models
@using FormacaoDGR.Areas.Identity.Services
@using FormacaoDGR.Pages.Components
@using FormacaoDGR.Pages.Admin.Components

@inherits OwningComponentBase<UserManager<ApplicationUser>>

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAppUserService _appUserService
@inject IAppRoleService _appRoleService
@inject IAppUserRoleService _appUserRoleService
@inject IUserUhService _userUhService
@inject IUhService _uhService
@inject IJSRuntime _jsRuntime

<AuthorizeView Context="authContext">
    <Authorized>
        <Container Fluid="true">
            <Breadcrumb Mode="BreadcrumbMode.Auto">
                <BreadcrumbItem>
                    <BreadcrumbLink To="">Início</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <BreadcrumbLink To="uhsmanager">Utilizadores</BreadcrumbLink>
                </BreadcrumbItem>
            </Breadcrumb>
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                    <Card>
                        <CardBody>
                            <CardTitle Size="5">Unidades de Handling</CardTitle>
                            <CardText>
                                @if (AllUsers == null)
                                {
                                    <p><em>Loading...</em></p>
                                }
                                else
                                {
                                    <Table Striped="true" Bordered="true" Hoverable="true" FullWidth="false">
                                        <TableHeader ThemeContrast="ThemeContrast.Light">
                                            <TableRow>
                                                @if (@authContext.User.IsInRole("temp")) //substituir por Admins
                                                {

                                                }
                                                <TableHeaderCell>Menu</TableHeaderCell>
                                                <TableHeaderCell>Email</TableHeaderCell>
                                                <TableHeaderCell>Nome</TableHeaderCell>
                                                <TableHeaderCell>Função</TableHeaderCell>
                                                <TableHeaderCell>UH'S</TableHeaderCell>
                                            </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var userItem in AllUsers)
                                            {
                                                <TableRow>
                                                    <TableRowCell>
                                                        <Tooltip Text="Editar Utilizador">
                                                            <Button Color="Color.Info" Clicked="@(() => PrepareForEdit(userItem))"
                                                                    data-toggle="modal" data-target="#userModal">
                                                                <Icon Name="IconName.Edit" />
                                                            </Button>
                                                        </Tooltip>
                                                        <Tooltip Text="Apagar Utilizador">
                                                            <Button Color="Color.Danger" Clicked="@(() => PrepareForDelete(userItem))"
                                                                    data-toggle="modal" data-target="#confirmDeleteModal">
                                                                <Icon Name="IconName.Delete" />
                                                            </Button>
                                                        </Tooltip>
                                                    </TableRowCell>
                                                    <TableRowCell>@userItem.UserName</TableRowCell>
                                                    <TableRowCell>@userItem.Name</TableRowCell>
                                                    <TableRowCell>
                                                        @{var listRoles = AllUserRoles.Where(i => i.UserId == userItem.Id);}
                                                        @foreach (var r in listRoles)
                                                        {
                                                        <p>
                                                            @{ var roleName = AllRoles.Where(i => i.Id == r.RoleId).Select(n => n.Name).FirstOrDefault().ToString();}
                                                            <Badge Color="Color.Secondary">@roleName</Badge>
                                                        </p>
                                                        }
                                                    </TableRowCell>
                                                    <TableRowCell>
                                                        @{var listUhs = AllUserUhs.Where(i => i.UserId == userItem.Id);}
                                                        @foreach (var u in listUhs)
                                                        {
                                                            var uhIata = AllUhs.Where(i => i.UhID == u.UhID).Select(n => n.UhNome).FirstOrDefault().ToString();
                                                            <Badge Color="Color.Info">@uhIata</Badge>
                                                        }
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>

                                }
                                <Tooltip Text="Criar novo utilizador">
                                    <Button Color="Color.Success" Clicked="@(() => InitializeUserObject())"
                                            data-toggle="modal" data-target="#userModal">
                                        Criar <Icon Name="IconName.Add" />
                                    </Button>
                                </Tooltip>
                            </CardText>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
        </Container>

        <ConfirmDialog OnClick="@Delete" />
        <UserModal ModelUser=modelUser DataChanged="@DataChanged" IsEdit="@isEdit">
            <CustomHeader>@customHeader</CustomHeader>
        </UserModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    IList<ApplicationUser> AllUsers = new List<ApplicationUser>();
    IList<ApplicationRole> AllRoles = new List<ApplicationRole>();
    IList<ApplicationUserRole> AllUserRoles = new List<ApplicationUserRole>();

    IList<Uh> AllUhs = new List<Uh>();
    IList<UserUh> AllUserUhs = new List<UserUh>();

    ApplicationUser modelUser = new ApplicationUser();
    string customHeader = string.Empty;
    bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await GetAllData();
    }

    private void PrepareForEdit(ApplicationUser applicationUser)
    {
        customHeader = "Editar Utilizador";
        modelUser = applicationUser;
        isEdit = true;
    }

    private void PrepareForDelete(ApplicationUser applicationUser)
    {
        modelUser = applicationUser;
    }

    private void InitializeUserObject()
    {
        modelUser = new ApplicationUser();
        modelUser.PasswordHash = "*****";
        customHeader = "Adicionar Utilizador";
        isEdit = false;
    }

    private async Task Delete()
    {
        var user = await Service.FindByIdAsync(modelUser.Id);
        if (user != null)
        {
            try
            {

                await _userUhService.DeleteAllUserUhAsync(user.Id).ConfigureAwait(true);
                await _appUserRoleService.DeleteAllUserRolesAsync(user.Id);
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                // Delete the user
                var deletUser = await Service.DeleteAsync(user);
            }
        }

        await _jsRuntime.InvokeAsync<object>("global.closeModal", "confirmDeleteModal");

        modelUser = new ApplicationUser();
        DataChanged();

        await Task.Delay(100);
        Toaster.Error("Utilizador apagado com sucesso", "Sucesso!");
    }

    private async void DataChanged()
    {
        await GetAllData();
        StateHasChanged();
    }

    public async Task GetAllData()
    {
        AllUsers = new List<ApplicationUser>();

        var user = Service.Users.Select(x => new ApplicationUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Name = x.Name,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            AllUsers.Add(item);
        }

        AllRoles = await _appRoleService.GetAllRolesAsync();
        AllUserRoles = await _appUserRoleService.GetAllUserRolesAsync();
        AllUserUhs = await _userUhService.GetAllUserUhsAsync();
        AllUhs = await _uhService.GetAllUhsAsync();
    }
}
