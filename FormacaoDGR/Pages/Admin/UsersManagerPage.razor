@page "/usersmanager"
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity
@using FormacaoDGR.Areas.Identity.Models
@using FormacaoDGR.Areas.Identity.Services
@using FormacaoDGR.Pages.Components
@using FormacaoDGR.Pages.Admin.Components

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> _UserManager
@inject IAppUserService _appUserService
@inject IAppRoleService _appRoleService
@inject IAppUserRoleService _appUserRoleService
@inject IUserUhService _userUhService
@inject IUhService _uhService
@inject IJSRuntime _jsRuntime

<AuthorizeView>
    <Authorized>
        <div class="col-lg-12 col-md-12 col-sm12 col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Utilizadores</h5>
                    @if (AllUsers == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <table class="table table-bordered table-hover table-striped table-responsive">
                            <thead>
                                <tr>
                                    @if (@context.User.IsInRole("temp")) //substituir por Admins
                                    {

                                    }
                                    <th>Email</th>
                                    <th>Nome</th>
                                    <th>Função</th>
                                    <th>UH'S</th>
                                    <th>Menu</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var userItem in AllUsers)
                                {
                                    <tr>
                                        <td>@userItem.UserName</td>
                                        <td>@userItem.Name</td>
                                        <td>
                                            @{var listRoles = AllUserRoles.Where(i => i.UserId == userItem.Id);}
                                            @foreach (var r in listRoles)
                                            {
                                                <p>
                                                    @{ var roleName = AllRoles.Where(i => i.Id == r.RoleId).Select(n => n.Name).FirstOrDefault().ToString();}
                                                    @roleName
                                                </p>
                                            }
                                        </td>
                                        <td>
                                            @{var listUhs = AllUserUhs.Where(i => i.UserId == userItem.Id);}
                                            @foreach (var u in listUhs)
                                            {
                                                var uhIata = AllUhs.Where(i => i.UhID == u.UhID).Select(n => n.UhNome).FirstOrDefault().ToString();
                                                <span class="badge badge-secondary">@uhIata</span>
                                            }
                                        </td>
                                        <td>
                                            <span data-toggle="tooltip" data-placement="top" title="Editar">
                                                <button type="button" class="btn btn-primary btn-circle btn-sm" data-toggle="modal" data-target="#userModal"
                                                        @onclick="(() => PrepareForEdit(userItem))">
                                                    <span class="oi oi-pencil"></span>
                                                </button>
                                            </span>
                                            <span data-toggle="tooltip" data-placement="top" title="Apagar">
                                                <button type="button" class="btn btn-danger btn-circle btn-sm" data-toggle="modal" data-target="#confirmDeleteModal"
                                                        @onclick="(() => PrepareForDelete(userItem))">
                                                    <span class="oi oi-trash"></span>
                                                </button>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    }
                    <div>
                        <span data-toggle="tooltip" data-placement="top" title="Adicionar">
                            <button type="button" class="btn btn-success btn-sm" data-toggle="modal" data-target="#userModal" @onclick="(() => InitializeUserObject())">
                                Criar <span class="oi oi-plus" style="font-size: 12px;"></span>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <ConfirmDialog OnClick="@Delete" />

        <UserModal ModelUser=modelUser DataChanged="@DataChanged" IsEdit="@isEdit">
            <CustomHeader>@customHeader</CustomHeader>
        </UserModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    IList<ApplicationUser> AllUsers = new List<ApplicationUser>();
    IList<ApplicationRole> AllRoles = new List<ApplicationRole>();
    IList<ApplicationUserRole> AllUserRoles = new List<ApplicationUserRole>();

    IList<Uh> AllUhs = new List<Uh>();
    IList<UserUh> AllUserUhs = new List<UserUh>();

    ApplicationUser modelUser = new ApplicationUser();
    string customHeader = string.Empty;
    bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await GetAllData();
    }

    private void PrepareForEdit(ApplicationUser applicationUser)
    {
        customHeader = "Editar Utilizador";
        modelUser = applicationUser;
        isEdit = true;
    }

    private void PrepareForDelete(ApplicationUser applicationUser)
    {
        modelUser = applicationUser;
    }

    private void InitializeUserObject()
    {
        modelUser = new ApplicationUser();
        modelUser.PasswordHash = "*****";
        customHeader = "Adicionar Utilizador";
        isEdit = false;
    }

    private async Task Delete()
    {
        var user = await _UserManager.FindByIdAsync(modelUser.Id);
        if (user != null)
        {
            try
            {

                await _userUhService.DeleteAllUserUhAsync(user.Id).ConfigureAwait(true);
                await _appUserRoleService.DeleteAllUserRolesAsync(user.Id);
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                // Delete the user
                var deletUser = await _UserManager.DeleteAsync(user);
            }
        }

        await _jsRuntime.InvokeAsync<object>("global.closeModal", "confirmDeleteModal");

        modelUser = new ApplicationUser();
        DataChanged();

        await Task.Delay(100);
        Toaster.Error("Utilizador apagado com sucesso", "Sucesso!");
    }

    private async void DataChanged()
    {
        await GetAllData();
        StateHasChanged();
    }

    public async Task GetAllData()
    {
        AllUsers = new List<ApplicationUser>();

        var user = _UserManager.Users.Select(x => new ApplicationUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Name = x.Name,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            AllUsers.Add(item);
        }

        AllRoles = await _appRoleService.GetAllRolesAsync();
        AllUserRoles = await _appUserRoleService.GetAllUserRolesAsync();
        AllUserUhs = await _userUhService.GetAllUserUhsAsync();
        AllUhs = await _uhService.GetAllUhsAsync();
    }
}
