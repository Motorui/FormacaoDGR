@page "/uhsmanager"
@attribute [Authorize]

@using FormacaoDGR.Areas.Identity.Models
@using FormacaoDGR.Areas.Identity.Services
@using FormacaoDGR.Pages.Components
@using FormacaoDGR.Pages.Admin.Components

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUhService _uhService
@inject IJSRuntime _jsRuntime

<AuthorizeView>
    <Authorized>
        <div class="col-lg-12 col-md-12 col-sm12 col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Unidades de Handling</h5>
                    @if (AllUhs == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <table class="table table-bordered table-hover table-striped table-responsive">
                            <thead>
                                <tr>
                                    <th>Nome</th>
                                    <th>IATA</th>
                                    @if (@context.User.IsInRole("temp")) //substituir por Admins
                                    {
                                        <th>Criado em:</th>
                                        <th>Criado por:</th>
                                        <th>Atualizado em:</th>
                                        <th>Atualizado por:</th>
                                    }
                                    <th>Menu</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Uh uhItem in AllUhs)
                                {
                                    <tr>
                                        <td>@uhItem.UhNome</td>
                                        <td>@uhItem.UhIATA</td>
                                        @if (@context.User.IsInRole("temp")) //substituir por Admins
                                        {
                                            <td>@uhItem.CreatedAt</td>
                                            <td>@uhItem.CreatedBy</td>
                                            <td>@uhItem.LastUpdatedAt</td>
                                            <td>@uhItem.LastUpdatedBy</td>
                                        }
                                        <td>
                                            <span data-toggle="tooltip" data-placement="top" title="Editar">
                                                <button type="button" class="btn btn-primary btn-circle btn-sm" data-toggle="modal" data-target="#uhModal"
                                                        @onclick="(() => PrepareForEdit(uhItem))">
                                                    <span class="oi oi-pencil"></span>
                                                </button>
                                            </span>
                                            <span data-toggle="tooltip" data-placement="top" title="Apagar">
                                                <button type="button" class="btn btn-danger btn-circle btn-sm" data-toggle="modal" data-target="#confirmDeleteModal"
                                                        @onclick="(() => PrepareForDelete(uhItem))">
                                                    <span class="oi oi-trash"></span>
                                                </button>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    }
                    <span data-toggle="tooltip" data-placement="top" title="Adicionar">
                        <button type="button" class="btn btn-success" data-toggle="modal" data-target="#uhModal" @onclick="(() => InitializeUhObject())">
                            Criar <span class="oi oi-plus" style="font-size: 12px;"></span>
                        </button>
                    </span>
                </div>
            </div>
        </div>

        <ConfirmDialog OnClick="@Delete" />

        <UhModal ModelUh=modelUh DataChanged="@DataChanged">
            <CustomHeader>@customHeader</CustomHeader>
        </UhModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    IList<Uh> AllUhs = new List<Uh>();
    Uh modelUh = new Uh();
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetAllUhs();
    }

    private void InitializeUhObject()
    {
        modelUh = new Uh();
        customHeader = "Adicionar UH";
    }

    private async void DataChanged()
    {
        await GetAllUhs();
        StateHasChanged();
    }

    public async Task GetAllUhs()
    {
        AllUhs = await _uhService.GetAllUhsAsync();
    }

    private void PrepareForEdit(Uh uh)
    {
        customHeader = "Editar UH";
        modelUh = uh;
    }

    private void PrepareForDelete(Uh uh)
    {
        modelUh = uh;
    }

    private async Task Delete()
    {
        await _uhService.DeleteUhAsync(modelUh);
        await _jsRuntime.InvokeAsync<object>("global.closeModal", "confirmDeleteModal");

        await GetAllUhs();
        modelUh = new Uh();

        await Task.Delay(100);
        Toaster.Error("UH apagada com sucesso", "Sucesso!");
    }

}
