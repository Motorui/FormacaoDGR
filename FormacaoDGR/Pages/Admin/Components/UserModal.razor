@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using FormacaoDGR.Areas.Identity.Models
@using FormacaoDGR.Areas.Identity.Services
@using FormacaoDGR.Components

@inherits OwningComponentBase<UserManager<ApplicationUser>>

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IAppUserService _appUserService
@inject IAppRoleService _appRoleService
@inject IAppUserRoleService _appUserRoleService
@inject IUserUhService _userUhService
@inject IUhService _uhService
@inject IJSRuntime _jsRuntime

<Modal @ref="@UsersModal" role="dialog" id="userModal">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>@CustomHeader</ModalTitle>
            <CloseButton Clicked="@(() => CloseUserModal("userModal"))" />
        </ModalHeader>
        <EditForm Model="@ModelUser" OnValidSubmit="@HandleValidSubmit">
            <ModalBody>
                <DataAnnotationsValidator />
                <input type="hidden" @bind-value="@ModelUser.Id" />
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">Nome</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit @bind-Text="@ModelUser.Name" />
                        <ValidationMessage For="@(() => ModelUser.Name)" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">Email</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit Role="TextRole.Email" @bind-Text="@ModelUser.UserName" />
                        <ValidationMessage For="@(() => ModelUser.UserName)" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">Password</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit Role="TextRole.Password" @bind-Text="@ModelUser.PasswordHash" />
                        <ValidationMessage For="@(() => ModelUser.PasswordHash)" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">Tipo</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <Select @bind-SelectedValue="@OwnedRoleId">
                            @foreach (var role in AllRoles)
                            {
                                <SelectItem Value="@role.Id">@role.Name</SelectItem>
                            }
                        </Select>
                        <small class="text-muted">Selecionar Grupo de Empresas</small>
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    @if (SelectedIds != null)
                    {
                        <FieldLabel ColumnSize="ColumnSize.Is2">UH's</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <CheckBoxList Data="@UhList" TextField="@((item)=>item.UhNome)"
                                          ValueField="@((item)=>item.UhID)" SelectedValues="@SelectedIds" />
                        </FieldBody>
                    }
                </Field>
                </ModalBody>
                <ModalFooter>
                    <p>
                        <span style="color:red">@strError</span>
                    </p>
                    <Tooltip Text="Gravar">
                        <Button Color="Color.Success" Type="ButtonType.Submit">
                            <Icon Name="IconName.Save" /> Submeter
                        </Button>
                    </Tooltip>
                    <Tooltip Text="Fechar">
                        <Button Color="Color.Warning" Clicked="@(() => CloseUserModal("userModal"))">
                            <Icon Name="IconName.StepBackward" /> Cancelar
                        </Button>
                    </Tooltip>
                </ModalFooter>
            </EditForm>
        </ModalContent>
    </Modal>

    @code {
        private Modal UsersModal;

        [Parameter] public ApplicationUser ModelUser { get; set; }
        [Parameter] public Action DataChanged { get; set; }
        [Parameter] public RenderFragment CustomHeader { get; set; }
        [Parameter] public bool IsEdit { get; set; }

        IList<ApplicationRole> AllRoles = new List<ApplicationRole>();
        ApplicationUserRole ownedRole = new ApplicationUserRole();
        public string OwnedRoleId { get; set; } = string.Empty;
        // Para guardar erros
        string strError = "";

        public IList<Uh> UhList { get; set; }
        protected List<Guid> SelectedIds = new List<Guid>();

        protected override async Task OnInitializedAsync()
        {
            AllRoles = await _appRoleService.GetAllRolesAsync();
            UhList = await _uhService.GetAllUhsAsync();
        }

        protected override void OnParametersSet()
        {
            string UserID = ModelUser.Id;

            Task.Run(async () => await FillOwnedList(UserID)).Wait();

        }

        private async Task FillOwnedList(string uid)
        {
            SelectedIds = await _userUhService.GetOwnedUserUhsAsync(uid);

            ownedRole = await _appUserRoleService.GetUserRoleAsync(uid);
            if (ownedRole != null)
            {
                OwnedRoleId = ownedRole.RoleId;
            }
            else
            {
                OwnedRoleId = string.Empty;
            }
        }

        private async void HandleValidSubmit()
        {
            try
            {
                if (IsEdit)
                {
                    // Get the user
                    var user = await Service.FindByIdAsync(ModelUser.Id);

                    // Update the user
                    user.Name = ModelUser.Name;
                    user.UserName = ModelUser.UserName;
                    user.NormalizedUserName = ModelUser.UserName.ToUpper();
                    user.Email = ModelUser.UserName;
                    user.NormalizedEmail = ModelUser.UserName.ToUpper();
                    user.PasswordHash = user.PasswordHash;

                    // Only update password if the current value
                    // is not the default value
                    if (ModelUser.PasswordHash != "*****")
                    {
                        var resetToken = await Service.GeneratePasswordResetTokenAsync(user);
                        var passworduser = await Service
                            .ResetPasswordAsync(
                                user,
                                resetToken,
                                ModelUser.PasswordHash
                            );

                        if (!passworduser.Succeeded)
                        {
                            if (passworduser.Errors.FirstOrDefault() != null)
                            {
                                strError = passworduser.Errors.FirstOrDefault().Description;
                            }
                            else
                            {
                                strError = "Pasword error";
                            }
                            // Keep the popup opened
                            return;
                        }
                    }

                    var updateResult = await Service.UpdateAsync(user);

                    if (!updateResult.Succeeded)
                    {
                        if (updateResult.Errors.FirstOrDefault() != null)
                        {
                            strError = updateResult.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Update error";
                        }
                        // Keep the popup opened
                        return;
                    }
                    else
                    {
                        await _userUhService.DeleteAllUserUhAsync(ModelUser.Id);
                        await _appUserRoleService.DeleteAllUserRolesAsync(ModelUser.Id);

                        if (SelectedIds != null)
                        {
                            foreach (var ownedUh in SelectedIds)
                            {
                                UserUh itemUserUh = new UserUh()
                                {
                                    UhID = ownedUh,
                                    UserId = user.Id
                                };
                                await _userUhService.AddUserUhAsync(itemUserUh);
                            }
                        }

                        if (OwnedRoleId != null)
                        {
                            ApplicationUserRole itemUserRole = new ApplicationUserRole()
                            {
                                RoleId = OwnedRoleId,
                                UserId = user.Id
                            };
                            await _appUserRoleService.AddUserRoleAsync(itemUserRole);
                        }
                    }

                    await Task.Delay(100);
                    Toaster.Success("Utilizador editado com sucesso", "Sucesso!");

                }
                else
                {
                    // Insert new user
                    var NewUser = new ApplicationUser
                    {
                        Name = ModelUser.Name,
                        UserName = ModelUser.UserName,
                        NormalizedUserName = ModelUser.UserName.ToUpper(),
                        Email = ModelUser.UserName,
                        NormalizedEmail = ModelUser.UserName.ToUpper()
                    };
                    var CreateResult = await Service.CreateAsync(NewUser, ModelUser.PasswordHash);
                    if (!CreateResult.Succeeded)
                    {
                        if (CreateResult.Errors.FirstOrDefault() != null)
                        {
                            strError = CreateResult.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Create error";
                        }
                        // Keep the popup opened
                        return;
                    }
                    else
                    {
                        if (SelectedIds != null)
                        {
                            foreach (var ownedUh in SelectedIds)
                            {
                                UserUh itemUserUh = new UserUh()
                                {
                                    UhID = ownedUh,
                                    UserId = NewUser.Id
                                };
                                await _userUhService.AddUserUhAsync(itemUserUh);
                            }
                        }

                        if (OwnedRoleId != null)
                        {
                            ApplicationUserRole itemUserRole = new ApplicationUserRole()
                            {
                                RoleId = OwnedRoleId,
                                UserId = NewUser.Id
                            };
                            await _appUserRoleService.AddUserRoleAsync(itemUserRole);
                        }
                    }

                    await Task.Delay(100);
                    Toaster.Success("Utilizador adicionado com sucesso", "Sucesso!");
                }

                await CloseUserModal("userModal");
                DataChanged?.Invoke();
            }
            catch (Exception ex)
            {
                strError = ex.GetBaseException().Message;
            }
        }

        private async Task CloseUserModal(string modalId)
        {
            await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);
        }

    }