@using FormacaoDGR.Areas.Identity.Models
@using FormacaoDGR.Areas.Identity.Services

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IUhService _uhService
@inject IJSRuntime _jsRuntime

<Modal @ref="@UhsModal" role="dialog" id="uhModal">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@CustomHeader</ModalTitle>
            <CloseButton Clicked="@(() => CloseUhModal("uhModal"))" />
        </ModalHeader>
        <EditForm Model="@ModelUh" OnValidSubmit="@HandleValidSubmit">
            <ModalBody>
                <DataAnnotationsValidator />
                <input type="hidden" @bind-value="@ModelUh.UhID" />
                <Field>
                    <FieldLabel>Nome</FieldLabel>
                    <TextEdit @bind-Text="@ModelUh.UhNome">
                        <FieldHelp>Inserir nome da unidade de handling</FieldHelp>
                    </TextEdit>
                    <ValidationMessage For="@(() => ModelUh.UhNome)" />
                </Field>
                <Field>
                    <FieldLabel>IATA</FieldLabel>
                    <TextEdit @bind-Text="@ModelUh.UhIATA" >
                        <FieldHelp>Inserir o código IATA</FieldHelp>
                    </TextEdit>
                    <ValidationMessage For="@(() => ModelUh.UhIATA)" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Tooltip Text="Gravar">
                    <Button Color="Color.Success" Type="ButtonType.Submit">
                        <Icon Name="IconName.Save" /> Submeter
                    </Button>
                </Tooltip>
                <Tooltip Text="Fechar">
                    <Button Color="Color.Warning" Clicked="@(() => CloseUhModal("uhModal"))">
                        <Icon Name="IconName.StepBackward" /> Cancelar
                    </Button>
                </Tooltip>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

@code {
    [Parameter] public Uh ModelUh { get; set; }
    [Parameter] public Action DataChanged { get; set; }
    [Parameter] public RenderFragment CustomHeader { get; set; }

    private Modal UhsModal;

    private async void HandleValidSubmit()
    {
        if (ModelUh.UhID == Guid.Empty)
        {
            ModelUh.UhIATA = ModelUh.UhIATA.ToUpper();
            await _uhService.AddUhAsync(ModelUh);

            await Task.Delay(100);
            Toaster.Success("UH adicionada com sucesso", "Sucesso!");
        }
        else
        {
            ModelUh.UhIATA = ModelUh.UhIATA.ToUpper();
            await _uhService.UpdateUhAsync(ModelUh);

            await Task.Delay(100);
            Toaster.Success("UH editada com sucesso", "Sucesso!");
        }

        await CloseUhModal("uhModal");
        DataChanged?.Invoke();
    }

    private async Task CloseUhModal(string modalId)
    {
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);
    }
}
