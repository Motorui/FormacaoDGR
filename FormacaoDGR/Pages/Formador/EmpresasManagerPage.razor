@page "/empresasmanager"
@attribute [Authorize]

@using FormacaoDGR.Data.Models
@using FormacaoDGR.Data.Services
@using FormacaoDGR.Pages.Components
@using FormacaoDGR.Pages.Formador.Components

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IEmpresaService _empresaService
@inject IJSRuntime _jsRuntime

<AuthorizeView>
    <Authorized>
        <div class="col-lg-12 col-md-12 col-sm12 col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Empresas</h5>
                    @if (AllEmpresas == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <table class="table table-bordered table-hover table-striped table-responsive">
                            <thead>
                                <tr>
                                    <th>Nome</th>
                                    @if (@context.User.IsInRole("temp")) //substituir por Admins
                                    {
                                        <th>Criado em:</th>
                                        <th>Criado por:</th>
                                        <th>Atualizado em:</th>
                                        <th>Atualizado por:</th>
                                    }
                                    <th>Menu</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Empresa empresaItem in AllEmpresas)
                                {
                                    <tr>
                                        <td>@empresaItem.Nome</td>
                                        @if (@context.User.IsInRole("temp")) //substituir por Admins
                                        {
                                            <td>@empresaItem.CreatedAt</td>
                                            <td>@empresaItem.CreatedBy</td>
                                            <td>@empresaItem.LastUpdatedAt</td>
                                            <td>@empresaItem.LastUpdatedBy</td>
                                        }
                                        <td>
                                            <span data-toggle="tooltip" data-placement="top" title="Editar">
                                                <button type="button" class="btn btn-primary btn-circle btn-sm" data-toggle="modal" data-target="#empresaModal"
                                                        @onclick="(() => PrepareForEdit(empresaItem))">
                                                    <span class="oi oi-pencil"></span>
                                                </button>
                                            </span>
                                            <span data-toggle="tooltip" data-placement="top" title="Apagar">
                                                <button type="button" class="btn btn-danger btn-circle btn-sm" data-toggle="modal" data-target="#confirmDeleteModal"
                                                        @onclick="(() => PrepareForDelete(empresaItem))">
                                                    <span class="oi oi-trash"></span>
                                                </button>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    }
                    <span data-toggle="tooltip" data-placement="top" title="Adicionar">
                        <button type="button" class="btn btn-success" data-toggle="modal" data-target="#empresaModal" @onclick="(() => InitializeEmpresaObject())">
                            Criar <span class="oi oi-plus" style="font-size: 12px;"></span>
                        </button>
                    </span>
                </div>
            </div>
        </div>

        <ConfirmDialog OnClick="@Delete" />

        <EmpresasModal ModelEmpresa=modelEmpresa DataChanged="@DataChanged">
            <CustomHeader>@customHeader</CustomHeader>
        </EmpresasModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    IList<Empresa> AllEmpresas = new List<Empresa>();
    Empresa modelEmpresa = new Empresa();
    string customHeader = string.Empty;

    //protected override async Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await GetAllEmpresas();
    }

    private void InitializeEmpresaObject()
    {
        modelEmpresa = new Empresa();
        customHeader = "Adicionar Empresa";
    }

    private async void DataChanged()
    {
        await GetAllEmpresas();
        StateHasChanged();
    }

    public async Task GetAllEmpresas()
    {
        AllEmpresas = await _empresaService.GetAllEmpresasAsync();
    }

    private void PrepareForEdit(Empresa empresa)
    {
        customHeader = "Editar Empresa";
        modelEmpresa = empresa;
    }

    private void PrepareForDelete(Empresa empresa)
    {
        modelEmpresa = empresa;
    }

    private async Task Delete()
    {
        await _empresaService.DeleteEmpresaAsync(modelEmpresa);
        await _jsRuntime.InvokeAsync<object>("global.closeModal", "confirmDeleteModal");

        await GetAllEmpresas();
        modelEmpresa = new Empresa();

        await Task.Delay(100);
        Toaster.Error("Empresa apagada com sucesso", "Sucesso!");
    }

}
