@page "/gruposmanager"
@attribute [Authorize]

@using FormacaoDGR.Data.Models
@using FormacaoDGR.Data.Services
@using FormacaoDGR.Pages.Components
@using FormacaoDGR.Pages.Formador.Components

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGrupoService _grupoService
@inject IJSRuntime _jsRuntime

<AuthorizeView>
    <Authorized>
        <div class="col-lg-12 col-md-12 col-sm12 col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Grupos</h5>
                    @if (AllGrupos == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <table class="table table-bordered table-hover table-striped table-responsive">
                            <thead>
                                <tr>
                                    <th>Nome</th>
                                    @if (@context.User.IsInRole("temp")) //substituir por Admins
                                    {
                                        <th>Criado em:</th>
                                        <th>Criado por:</th>
                                        <th>Atualizado em:</th>
                                        <th>Atualizado por:</th>
                                    }
                                    <th>Menu</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Grupo grupoItem in AllGrupos)
                                {
                                    <tr>
                                        <td>@grupoItem.Nome</td>
                                        @if (@context.User.IsInRole("temp")) //substituir por Admins
                                        {
                                            <td>@grupoItem.CreatedAt</td>
                                            <td>@grupoItem.CreatedBy</td>
                                            <td>@grupoItem.LastUpdatedAt</td>
                                            <td>@grupoItem.LastUpdatedBy</td>
                                        }
                                        <td>
                                            <span data-toggle="tooltip" data-placement="top" title="Editar">
                                                <button type="button" class="btn btn-primary btn-circle btn-sm" data-toggle="modal" data-target="#grupoModal"
                                                        @onclick="(() => PrepareForEdit(grupoItem))">
                                                    <span class="oi oi-pencil"></span>
                                                </button>
                                            </span>
                                            <span data-toggle="tooltip" data-placement="top" title="Apagar">
                                                <button type="button" class="btn btn-danger btn-circle btn-sm" data-toggle="modal" data-target="#confirmDeleteModal"
                                                        @onclick="(() => PrepareForDelete(grupoItem))">
                                                    <span class="oi oi-trash"></span>
                                                </button>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    }
                    <span data-toggle="tooltip" data-placement="top" title="Adicionar">
                        <button type="button" class="btn btn-success" data-toggle="modal" data-target="#grupoModal" @onclick="(() => InitializeGrupoObject())">
                            Criar <span class="oi oi-plus" style="font-size: 12px;"></span>
                        </button>
                    </span>
                </div>
            </div>
        </div>

        <ConfirmDialog OnClick="@Delete" />

        <GruposModal ModelGrupo=modelGrupo DataChanged="@DataChanged">
            <CustomHeader>@customHeader</CustomHeader>
        </GruposModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    IList<Grupo> AllGrupos = new List<Grupo>();
    Grupo modelGrupo = new Grupo();
    string customHeader = string.Empty;

    //protected override async Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await GetAllGrupos();
    }

    private void InitializeGrupoObject()
    {
        modelGrupo = new Grupo();
        customHeader = "Adicionar Grupo";
    }

    private async void DataChanged()
    {
        await GetAllGrupos();
        StateHasChanged();
    }

    public async Task GetAllGrupos()
    {
        AllGrupos = await _grupoService.GetAllGruposAsync();
    }

    private void PrepareForEdit(Grupo grupo)
    {
        customHeader = "Editar Grupo";
        modelGrupo = grupo;
    }

    private void PrepareForDelete(Grupo grupo)
    {
        modelGrupo = grupo;
    }

    private async Task Delete()
    {
        await _grupoService.DeleteGrupoAsync(modelGrupo);
        await _jsRuntime.InvokeAsync<object>("global.closeModal", "confirmDeleteModal");

        AllGrupos = await _grupoService.GetAllGruposAsync();
        modelGrupo = new Grupo();

        await Task.Delay(100);
        Toaster.Error("Grupo apagado com sucesso", "Sucesso!");
    }

}
