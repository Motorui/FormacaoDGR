@using FormacaoDGR.Data.Models
@using FormacaoDGR.Data.Services

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IEmpresaService _empresaService
@inject IJSRuntime _jsRuntime

<div class="modal" tabindex="-1" role="dialog" id="empresaModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@ModelEmpresa" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="taskName">Nome</label>
                        <input type="hidden" @bind-value="@ModelEmpresa.ID" />
                        <InputText id="name" class="form-control" @bind-Value="@ModelEmpresa.Nome" />
                        <ValidationMessage For="@(() => ModelEmpresa.Nome)" />
                    </div>
                    <span data-toggle="tooltip" data-placement="top" title="Gravar">
                        <button type="submit" class="btn btn-success btn-sm">
                            <span class="oi oi-hard-drive"></span> Submeter
                        </button>
                    </span>
                    <span data-toggle="tooltip" data-placement="top" title="Fechar">
                        <button type="button" class="btn btn-warning btn-sm" data-dismiss="modal">
                            <span class="oi oi-hard-drive"></span> Cancelar
                        </button>
                    </span>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Empresa ModelEmpresa { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    private async void HandleValidSubmit()
    {
        if (ModelEmpresa.ID == Guid.Empty)
        {
            await _empresaService.AddEmpresaAsync(ModelEmpresa);

            await Task.Delay(100);
            Toaster.Success("Empresa adicionada com sucesso", "Sucesso!");
        }
        else
        {
            await _empresaService.UpdateEmpresaAsync(ModelEmpresa);

            await Task.Delay(100);
            Toaster.Success("Empresa editada com sucesso", "Sucesso!");
        }

        await CloseEmpresaModal("empresaModal");
        DataChanged?.Invoke();
    }

    private async Task CloseEmpresaModal(string modalId)
    {
        await _jsRuntime.InvokeAsync<object>("global.closeModal", modalId);
    }
}