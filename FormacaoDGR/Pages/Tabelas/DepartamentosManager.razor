@page "/departamentosmanager"
@attribute [Authorize]

@using FormacaoDGR.Data.Models
@using FormacaoDGR.Data.Services
@using FormacaoDGR.Pages.Components
@using FormacaoDGR.Pages.Tabelas.Components

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDepartamentoService _departamentoService
@inject IJSRuntime _jsRuntime

<AuthorizeView Context="authContext">
    <Authorized>
        <Container Fluid="true">
            <Breadcrumb Mode="BreadcrumbMode.Auto">
                <BreadcrumbItem>
                    <BreadcrumbLink To="">Início</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <BreadcrumbLink To="#">Tabelas</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <BreadcrumbLink To="departamentosmanager">Departamentos</BreadcrumbLink>
                </BreadcrumbItem>
            </Breadcrumb>
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                    <Card>
                        <CardBody>
                            <CardTitle Size="5">Grupos</CardTitle>
                            <CardText>
                                @if (AllDepartamentos == null)
                                {
                                    <p><em>Loading...</em></p>
                                }
                                else
                                {
                                    <Table Striped="true" Bordered="true" Hoverable="true" FullWidth="false">
                                        <TableHeader ThemeContrast="ThemeContrast.Light">
                                            <TableRow>
                                                <TableHeaderCell>Menu</TableHeaderCell>
                                                <TableHeaderCell>Número</TableHeaderCell>
                                                <TableHeaderCell>Nome</TableHeaderCell>
                                                @if (authContext.User.IsInRole("temp")) //substituir por Admins
                                                {
                                                    <TableHeaderCell>Criado em:</TableHeaderCell>
                                                    <TableHeaderCell>Criado por:</TableHeaderCell>
                                                    <TableHeaderCell>Atualizado em:</TableHeaderCell>
                                                    <TableHeaderCell>Atualizado por:</TableHeaderCell>
                                                }
                                            </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (Departamento departamentoItem in AllDepartamentos)
                                            {
                                                <TableRow>
                                                    <TableRowCell>
                                                        <Tooltip Text="Editar Departamento">
                                                            <Button Color="Color.Info" Clicked="@(() => PrepareForEdit(departamentoItem))"
                                                                    data-toggle="modal" data-target="#departamentoModal">
                                                                <Icon Name="IconName.Edit" />
                                                            </Button>
                                                        </Tooltip>
                                                        <Tooltip Text="Apagar Departamento">
                                                            <Button Color="Color.Danger" Clicked="@(() => PrepareForDelete(departamentoItem))"
                                                                    data-toggle="modal" data-target="#confirmDeleteModal">
                                                                <Icon Name="IconName.Delete" />
                                                            </Button>
                                                        </Tooltip>
                                                    </TableRowCell>
                                                    <TableRowCell>@departamentoItem.Numero.ToString()</TableRowCell>
                                                    <TableRowCell>@departamentoItem.Nome</TableRowCell>
                                                    @if (authContext.User.IsInRole("temp")) //substituir por Admins
                                                    {
                                                        <TableRowCell>@departamentoItem.CreatedAt</TableRowCell>
                                                        <TableRowCell>@departamentoItem.CreatedBy</TableRowCell>
                                                        <TableRowCell>@departamentoItem.LastUpdatedAt</TableRowCell>
                                                        <TableRowCell>@departamentoItem.LastUpdatedBy</TableRowCell>
                                                    }
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>

                                }

                                <Tooltip Text="Criar novo Departamento">
                                    <Button Color="Color.Success" Clicked="@(() => InitializeDepartamentoObject())"
                                            data-toggle="modal" data-target="#departamentoModal">
                                        Criar <Icon Name="IconName.Add" />
                                    </Button>
                                </Tooltip>
                            </CardText>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
        </Container>

        <ConfirmDialog OnClick="@Delete" />
        <DepartamentosModal ModelDepartamento=modelDepartamento DataChanged="@DataChanged">
            <CustomHeader>@customHeader</CustomHeader>
        </DepartamentosModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    IList<Departamento> AllDepartamentos = new List<Departamento>();
    Departamento modelDepartamento = new Departamento();

    string customHeader = string.Empty;

    //protected override async Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        await GetAllDepartamentos();
    }

    private void InitializeDepartamentoObject()
    {
        modelDepartamento = new Departamento();
        customHeader = "Adicionar Departamento";
    }

    private async void DataChanged()
    {
        await GetAllDepartamentos();
        StateHasChanged();
    }

    public async Task GetAllDepartamentos()
    {
        AllDepartamentos = await _departamentoService.GetAllAsync();
    }

    private void PrepareForEdit(Departamento departamento)
    {
        customHeader = "Editar Departamento";
        modelDepartamento = departamento;
    }

    private void PrepareForDelete(Departamento departamento)
    {
        modelDepartamento = departamento;
    }

    private async Task Delete()
    {
        await _departamentoService.DeleteAsync(modelDepartamento);
        await _jsRuntime.InvokeAsync<object>("global.closeModal", "confirmDeleteModal");

        AllDepartamentos = await _departamentoService.GetAllAsync();
        modelDepartamento = new Departamento();

        await Task.Delay(100);
        Toaster.Error("Departamento apagado com sucesso", "Sucesso!");
    }

}
